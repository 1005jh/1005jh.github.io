{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/2023-12-05---docker를 활용한 mysql slave db/","result":{"data":{"markdownRemark":{"id":"1542d544-03e2-5742-a541-c49d4faf2faa","html":"<p>jmeter를 활용해 테스트를 진행 중 master, slave db를 적용한 환경에서의 테스트가 필요했다.\n하지만 실제 db에 replication을 적용해 테스트를 진행하기에는 비용적으로 너무 소모가 심했다.\n그래서 로컬환경에서 테스트를 하기 위해 docker를 활용하여 mysql의 master, slave 환경을 구성했다.</p>\n<p>참고할 많은 자료가 있지만 이 <a href=\"https://velog.io/@hyunho058/Mysql-%EB%B6%84%EC%82%B0%EC%B2%98%EB%A6%ACReplication-with-docker\">블로그</a>가 정리가 잘 되어있어 참고해 작업을 진행했고, spring 환경에서의 적용이 필요하면 참고하면 좋을 것 같다. 그러면 nestjs 환경에서 docker를 활용해 mysql의 master, slave 세팅을 시작해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app\n├── docker-compose.yml\n├── src\n├── master\n    ├── Dockerfile\n    └── my.cnf\n└── slave\n    ├── Dockerfile\n    └── my.cnf\n</code></pre></div>\n<p>구조는 위와같이 되어있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3\"</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">db-write</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span> ./\n      <span class=\"token key atrule\">dockerfile</span><span class=\"token punctuation\">:</span> master/Dockerfile\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">MYSQL_DATABASE</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"aliy\"</span>\n      <span class=\"token key atrule\">MYSQL_USER</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"user\"</span>\n      <span class=\"token key atrule\">MYSQL_PASSWORD</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"password\"</span>\n      <span class=\"token key atrule\">MYSQL_ROOT_PASSWORD</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"password\"</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"3321:3306\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> master<span class=\"token punctuation\">:</span>/var/lib/mysql\n      <span class=\"token punctuation\">-</span> master<span class=\"token punctuation\">:</span>/var/lib/mysql<span class=\"token punctuation\">-</span>files\n\n  <span class=\"token key atrule\">db-read</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span> ./\n      <span class=\"token key atrule\">dockerfile</span><span class=\"token punctuation\">:</span> slave/Dockerfile\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">MYSQL_DATABASE</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"aliy\"</span>\n      <span class=\"token key atrule\">MYSQL_USER</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"user\"</span>\n      <span class=\"token key atrule\">MYSQL_PASSWORD</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"password\"</span>\n      <span class=\"token key atrule\">MYSQL_ROOT_PASSWORD</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"password\"</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"3322:3306\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> slave<span class=\"token punctuation\">:</span>/var/lib/mysql\n      <span class=\"token punctuation\">-</span> slave<span class=\"token punctuation\">:</span>/var/lib/mysql<span class=\"token punctuation\">-</span>files\n\n<span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span>\n  slave<span class=\"token punctuation\">:</span></code></pre></div>\n<p>위처럼 yml파일을 작성을 해주고, 각 master, slave에 대한 dockerfile을 만들어줘야 한다.\n우선 master에 대한 파일이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\"># master</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> mysql:8.0.33</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ADD</span> ./master/my.cnf /etc/mysql/my.cnf</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cnf\"><pre class=\"language-cnf\"><code class=\"language-cnf\">&lt;!-- master my.cnf --&gt;\n[mysqld]\nlog_bin = mysql-bin\nserver_id = 10\nbinlog_do_db=aliy\ndefault_authentication_plugin=mysql_native_password</code></pre></div>\n<p>아래는 slave에 대한 파일이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\"># slave</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> mysql:8.0.33</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ADD</span> ./slave/my.cnf /etc/mysql/my.cnf</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cnf\"><pre class=\"language-cnf\"><code class=\"language-cnf\">&lt;!-- slave my.cnf --&gt;\n[mysqld]\nlog_bin = mysql-bin\nserver_id = 11\nrelay_log = /var/lib/mysql/mysql-relay-bin\nlog_slave_updates = &#39;ON&#39;\nread_only = &#39;ON&#39;\ndefault_authentication_plugin=mysql_native_password</code></pre></div>\n<p>위와 같이 작업이 끝나면 <code class=\"language-text\">docker-compose up -d</code> 명령어를 통해 실행을 시켜준다.</p>\n<p>성공적으로 실행이 되었다면 master db에 접속을 한다. 접속 후 terminal tab으로 이동 후 <code class=\"language-text\">mysql -u root -p</code>를 통해 접속 후 아래 명령어를 차례로 입력해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">user</span> <span class=\"token string\">'replicationUser'</span><span class=\"token variable\">@'%'</span> identified <span class=\"token keyword\">by</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">REPLICATION</span> SLAVE <span class=\"token keyword\">ON</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">TO</span> <span class=\"token string\">'replicationUser'</span><span class=\"token variable\">@'%'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 명령어는 사용자를 생성하고, 권한을 부여하는 명령어이다. 사용자 생성과정에서 에러가 생긴다면 생성된 유저인지 체크를 해보면 된다.\n작업이 완료되면 <code class=\"language-text\">show master status;</code>명령어를 통해 file과 position을 확인해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">show</span> master <span class=\"token keyword\">status</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 결과</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------------------+----------+--------------+------------------+-------------------+</span>\n<span class=\"token operator\">|</span> <span class=\"token keyword\">File</span>             <span class=\"token operator\">|</span> Position <span class=\"token operator\">|</span> Binlog_Do_DB <span class=\"token operator\">|</span> Binlog_Ignore_DB <span class=\"token operator\">|</span> Executed_Gtid_Set <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------------------+----------+--------------+------------------+-------------------+</span>\n<span class=\"token operator\">|</span> mysql<span class=\"token operator\">-</span>bin<span class=\"token punctuation\">.</span><span class=\"token number\">000003</span> <span class=\"token operator\">|</span>      <span class=\"token number\">682</span> <span class=\"token operator\">|</span> aliy         <span class=\"token operator\">|</span>                  <span class=\"token operator\">|</span>                   <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">------------------+----------+--------------+------------------+-------------------+</span>\n<span class=\"token number\">1</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span></code></pre></div>\n<p>그 후 master의 <code class=\"language-text\">IPv4Address</code>를 확인하기 위해 터미널로 돌아와 <code class=\"language-text\">docker network ls</code>를 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">NETWORK ID     NAME             DRIVER    SCOPE\n772bbbb08bb5   aliy_net-mysql   bridge    local</code></pre></div>\n<p>이처럼 뜨는 걸 확인할 수 있는데 여기서 name을 이용해 <code class=\"language-text\">docker inspect aliy_net-mysql</code> 명령어를 입력해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[\n    {\n        \"Name\": \"aliy_net-mysql\",\n        \"Id\": \"772bbbb08bb5934a6714c33e7c5287a3a54596e33d1d8344bdd486d29ff839af\",\n        \"Scope\": \"local\",\n        \"Driver\": \"bridge\",\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": null,\n            \"Config\": [\n                {\n                    \"Subnet\": \"172.26.0.0/16\",\n                    \"Gateway\": \"172.26.0.1\"\n                }\n            ]\n        },\n        \"Internal\": false,\n        \"Attachable\": false,\n        \"Ingress\": false,\n        \"ConfigFrom\": {\n            \"Network\": \"\"\n        },\n        \"ConfigOnly\": false,\n        \"Containers\": {\n            \"30be0d7d3169a2f7f33527972e0c5deaccf9b9e00b5e93d7678d9e7b0ff58f6c\": {\n                \"Name\": \"aliy-db-read-1\",\n                \"EndpointID\": \"4110530eb5f723f249fe4befd0ccb3ab0b292b16383e592cdeeffbf310163aee\",\n                \"MacAddress\": \"02:42:ac:1a:00:02\",\n                \"IPv4Address\": \"172.26.0.2/16\",\n                \"IPv6Address\": \"\"\n            },\n            \"9e110b4581ffd76c1202e6d84e04e9fdd6e2670a1b994f94cf233c66b7a62111\": {\n                \"Name\": \"aliy-db-write-1\",\n                \"EndpointID\": \"f35911e2ca400f7cd49cc45e16d5b7296ffd190cfcfd0d941f95f1aa8a084ba7\",\n                \"MacAddress\": \"02:42:ac:1a:00:03\",\n                \"IPv4Address\": \"172.26.0.3/16\",\n                \"IPv6Address\": \"\"\n            }\n        },\n        \"Options\": {},\n        \"Labels\": {\n            \"com.docker.compose.network\": \"net-mysql\",\n            \"com.docker.compose.project\": \"aliy\",\n            \"com.docker.compose.version\": \"2.15.1\"\n        }\n    }\n]</code></pre></div>\n<p>그러면 위와같이 나오는 걸 확인할 수 있고 여기서 얻은 정보들로 slave db에 접속해 세팅을 하면 된다.\nslave db에 접속 후</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">CHANGE MASTER <span class=\"token keyword\">TO</span> MASTER_HOST<span class=\"token operator\">=</span><span class=\"token string\">'172.26.0.3'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- write db의 IPv4Address</span>\nMASTER_USER<span class=\"token operator\">=</span><span class=\"token string\">'replicationUser'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- write db에서 생성한 유저의 이름</span>\nMASTER_PASSWORD<span class=\"token operator\">=</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- write db에서 생성한 유저의 password</span>\nMASTER_LOG_FILE<span class=\"token operator\">=</span><span class=\"token string\">'mysql-bin.000003'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- write db에서 show master status;를 통해 확인한 file</span>\nMASTER_LOG_POS<span class=\"token operator\">=</span><span class=\"token number\">682</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">-- wirte db에서 show master status;를 통해 확인한 position</span>\nGET_MASTER_PUBLIC_KEY<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같이 입력해준다.\n이후 slave를 시작해주고, 확인을 해보면</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">start</span> slave<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">show</span> slave <span class=\"token keyword\">status</span>\\G<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 결과</span>\n<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> <span class=\"token number\">1.</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n               Slave_IO_State: Waiting <span class=\"token keyword\">for</span> source <span class=\"token keyword\">to</span> send event\n                  Master_Host: <span class=\"token number\">172.26</span><span class=\"token number\">.0</span><span class=\"token number\">.3</span>\n                  Master_User: replicationUser\n                  Master_Port: <span class=\"token number\">3306</span>\n                Connect_Retry: <span class=\"token number\">60</span>\n              Master_Log_File: mysql<span class=\"token operator\">-</span>bin<span class=\"token punctuation\">.</span><span class=\"token number\">000003</span>\n          Read_Master_Log_Pos: <span class=\"token number\">682</span>\n               Relay_Log_File: mysql<span class=\"token operator\">-</span>relay<span class=\"token operator\">-</span>bin<span class=\"token punctuation\">.</span><span class=\"token number\">000002</span>\n                Relay_Log_Pos: <span class=\"token number\">326</span>\n        Relay_Master_Log_File: mysql<span class=\"token operator\">-</span>bin<span class=\"token punctuation\">.</span><span class=\"token number\">000003</span>\n             Slave_IO_Running: Yes\n            Slave_SQL_Running: Yes\n              Replicate_Do_DB:\n          Replicate_Ignore_DB:\n           Replicate_Do_Table:\n       Replicate_Ignore_Table:\n      Replicate_Wild_Do_Table:\n  Replicate_Wild_Ignore_Table:\n                   Last_Errno: <span class=\"token number\">0</span>\n                   Last_Error:\n                 Skip_Counter: <span class=\"token number\">0</span>\n          Exec_Master_Log_Pos: <span class=\"token number\">682</span>\n              Relay_Log_Space: <span class=\"token number\">536</span>\n              Until_Condition: None\n               Until_Log_File:\n                Until_Log_Pos: <span class=\"token number\">0</span>\n           Master_SSL_Allowed: <span class=\"token keyword\">No</span>\n           Master_SSL_CA_File:\n           Master_SSL_CA_Path:\n              Master_SSL_Cert:\n            Master_SSL_Cipher:\n               Master_SSL_Key:\n        Seconds_Behind_Master: <span class=\"token number\">0</span>\nMaster_SSL_Verify_Server_Cert: <span class=\"token keyword\">No</span>\n                Last_IO_Errno: <span class=\"token number\">0</span>\n                Last_IO_Error:\n               Last_SQL_Errno: <span class=\"token number\">0</span>\n               Last_SQL_Error:\n  Replicate_Ignore_Server_Ids:\n             Master_Server_Id: <span class=\"token number\">13</span>\n                  Master_UUID: c03c121d<span class=\"token operator\">-</span>c7f1<span class=\"token operator\">-</span><span class=\"token number\">11</span>ee<span class=\"token operator\">-</span><span class=\"token number\">9</span>d4a<span class=\"token operator\">-</span><span class=\"token number\">0242</span>ac1a0003\n             Master_Info_File: mysql<span class=\"token punctuation\">.</span>slave_master_info\n                    SQL_Delay: <span class=\"token number\">0</span>\n          SQL_Remaining_Delay: <span class=\"token boolean\">NULL</span>\n      Slave_SQL_Running_State: Replica has <span class=\"token keyword\">read</span> <span class=\"token keyword\">all</span> relay log<span class=\"token punctuation\">;</span> waiting <span class=\"token keyword\">for</span> more updates\n           Master_Retry_Count: <span class=\"token number\">86400</span>\n                  Master_Bind:\n      Last_IO_Error_Timestamp:\n     Last_SQL_Error_Timestamp:\n               Master_SSL_Crl:\n           Master_SSL_Crlpath:\n           Retrieved_Gtid_Set:\n            Executed_Gtid_Set:\n                Auto_Position: <span class=\"token number\">0</span>\n         Replicate_Rewrite_DB:\n                 Channel_Name:\n           Master_TLS_Version:\n       Master_public_key_path:\n        Get_master_public_key: <span class=\"token number\">1</span>\n            Network_Namespace:\n<span class=\"token number\">1</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> warning <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위처럼 나온다. 여기서</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Slave_IO_Running: Yes\nSlave_SQL_Running: Yes</code></pre></div>\n<p>이 두 옵션이 중요하다. No로 표기되어 있으면 연동되지 않은 것이다.</p>\n<p>그러면 프로젝트로 돌아와 <code class=\"language-text\">config</code>설정을 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app\n└── src\n    └── config\n          ├── typeorm.config.ts\n          └── app.config.ts</code></pre></div>\n<p>위의 두개의 파일을 세팅을 아래와 같이 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// config/typeorm.config.ts</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">databaseConfig</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mysql\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">entities</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dist/**/*.entity{.ts,.js}\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">migrations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dist/migrations/*{.ts,.js}\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">replication</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">master</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">3321</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">database</span><span class=\"token operator\">:</span> <span class=\"token string\">\"aliy\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token literal-property property\">slaves</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">3322</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">read</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">database</span><span class=\"token operator\">:</span> <span class=\"token string\">\"aliy\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">synchronize</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>여기서 slaves는 <code class=\"language-text\">ConnectionOptions</code>에서 반복문으로 돌며 작업하기 때문에 배열형식으로 하지 않으면 안된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// config/app.config.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> databaseConfig <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./typeorm.config\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">database</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token function\">databaseConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같이 세팅이 끝나면 app.module.ts로 가서</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">@<span class=\"token function\">Module</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">imports</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">...</span>\n    ConfigModule<span class=\"token punctuation\">.</span><span class=\"token function\">forRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">isGlobal</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">load</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>appConfig<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    TypeOrmModule<span class=\"token punctuation\">.</span><span class=\"token function\">forRootAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">imports</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>ConfigModule<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">useFactory</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">configService</span><span class=\"token operator\">:</span> ConfigService</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> configService<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span>ConnectionOptions<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">'database'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">inject</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>ConfigService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>위와 같이 작성을 해주고, <code class=\"language-text\">npm run start</code>를 통해 애플리케이션을 실행해준다.</p>\n<p>그러고 docker에서 master, slave를 접속해서 확인을 해본다면</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">show</span> <span class=\"token keyword\">databases</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 결과</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">--------------------+</span>\n<span class=\"token operator\">|</span> <span class=\"token keyword\">Database</span>           <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">--------------------+</span>\n<span class=\"token operator\">|</span> aliy               <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> information_schema <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> mysql              <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> performance_schema <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> sys                <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">--------------------+</span>\n<span class=\"token number\">5</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.02</span> sec<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위처럼 설정해준 db가 master, slave에 뜨는 걸 확인할 수 있다.\ntest로 유저를 넣고, master, slave에 작 적용이 되어 있는지 확인하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">use</span> aliy<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">user</span>\\G<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 결과</span>\n<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> <span class=\"token number\">1.</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n       createdAt: <span class=\"token number\">2023</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">05</span> <span class=\"token number\">09</span>:<span class=\"token number\">20</span>:<span class=\"token number\">35.399988</span>\n       updatedAt: <span class=\"token number\">2023</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">05</span> <span class=\"token number\">09</span>:<span class=\"token number\">20</span>:<span class=\"token number\">35.399988</span>\n              id: <span class=\"token number\">1</span>\n        nickname: <span class=\"token boolean\">NULL</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token number\">1</span> <span class=\"token keyword\">row</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span></code></pre></div>\n<p>적용이 잘 되었다면 위와같이 확인해볼 수 있을 것이다.</p>\n<p>참고</p>\n<p><a href=\"https://velog.io/@hyunho058/Mysql-%EB%B6%84%EC%82%B0%EC%B2%98%EB%A6%ACReplication-with-docker\"><a href=\"https://velog.io/@hyunho058/Mysql-%EB%B6%84%EC%82%B0%EC%B2%98%EB%A6%ACReplication-with-docker\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://velog.io/@hyunho058/Mysql-%EB%B6%84%EC%82%B0%EC%B2%98%EB%A6%ACReplication-with-docker</a></a></p>\n<p><a href=\"https://jupiny.com/2017/11/07/docker-mysql-replicaiton/\"><a href=\"https://jupiny.com/2017/11/07/docker-mysql-replicaiton/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jupiny.com/2017/11/07/docker-mysql-replicaiton/</a></a></p>\n<p><a href=\"https://docs.docker.com/\"><a href=\"https://docs.docker.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.docker.com/</a></a></p>","fields":{"slug":"/posts/2023-12-05---docker를 활용한 mysql slave db/","tagSlugs":["/tag/docker/","/tag/nestjs/","/tag/mysql/"]},"frontmatter":{"date":"2023-12-05T12:36:37.121Z","description":"docker를 활용한 mysql slave db","tags":["docker","nestjs","mysql"],"title":"docker를 활용한 mysql slave db","socialImage":null}}},"pageContext":{"slug":"/posts/2023-12-05---docker를 활용한 mysql slave db/"}},"staticQueryHashes":["251939775","2764776372","401334301"]}